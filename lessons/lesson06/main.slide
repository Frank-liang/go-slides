Go课程
第六节

PP
 https://github.com/wusuopubupt

* 大纲
- 作业点评和上节知识点回顾
- 对象和方法
- 接口
- 面向对象的方式实现LRUCache
- Etcd
- 并发编程概览
- 前六节课程总结
- 致谢


* 作业点评和上节知识点回顾

* 对象和方法
- 函数调用
.code func.go

* 声明方法
- Point类型的方法
.code method.go

* 方法接收者
- p是方法的接收者(类似其它语言的this、self)
- 频繁使用，KISS

* 声明方法
- 指针接收者的方法
.code method1.go

* 练习

- 设定一个路径上的所有点用[]Point表示，用函数的方式求出路径的长度
.code path_distance_sample1.go

* type是用来定义类型的
.code type.go
- 不同的对象可以有相同的方法名

* 练习
- 设定一个路径上的所有点用[]Point表示，用方法的方式求出路径的长度
.code path_distance_sample2.go

* time包的使用

* 指针接收者

- 实参过大希望避免复制
- 我们希望改变对象的成员
 
.code pointer_method.go

* 封装

* 可见性
- 数据隐藏
- 通过首字母大小写来控制可见性
- 可见性是package级别的


* 接口
- 接口本质是一种自定义类型
* 为什么需要接口
* 声明接口
.code iowriter.go

* 实现接口
- 实现了接口里面的所有方法就算实现了接口
- 如果它走起来像鸭子，叫起来像鸭子（实现了接口的方法），它就是一只鸭子
- os.File

* io.Writer接口
.code char_count.go

* 练习:
实现一个统计行数的writer

* 接口变量

.code ivar.go

* 常见接口

* sort.Interface
.code sort.go

* 练习
编写一个按照长度排序的实现 byLength

* http.Handler
godoc.org/net/http

* 空接口
- 空接口可以接受任何类型
 
* 面向对象的方式实现LRUCache

* Etcd
- 服务发现（Service Discovery）
- 消息发布与订阅
- 负载均衡
- 分布式锁
- 集群监控与Leader竞选

* Raft协议 
.link http://thesecretlivesofdata.com/raft
- 选主
- 日志副本

* 基于Etcd实现的分布式集群监控Agent

* 并发编程概览

* 致谢
